plugins {
  id 'application'
  id 'io.spring.dependency-management' version '1.0.6.RELEASE'
  id 'org.springframework.boot' version '2.1.0.RELEASE'
  id 'org.owasp.dependencycheck' version '3.3.4'
  id 'com.github.ben-manes.versions' version '0.20.0'
  id 'org.sonarqube' version '2.6.2'
  id 'jacoco'
}

group = 'uk.gov.hmcts.reform'
version = '0.0.1'
mainClassName = 'uk.gov.hmcts.reform.rpa.papi.Application'

sourceCompatibility = 1.8
targetCompatibility = 1.8

bootJar {
  archiveName = 'rpa-professional-api.jar'

  manifest {
    attributes('Implementation-Version': project.version.toString())
  }
}

configurations {
    aatCompile.extendsFrom(testCompile)
    aatRuntime.extendsFrom(testRuntime)
}

repositories {
  jcenter()
}

// it is important to specify logback classic and core packages explicitly as libraries like spring boot
// enforces it's own (older) version which is not recommended.
def versions = [
  reformLogging      : '3.0.4',
  springfoxSwagger   : '2.9.2'
]

dependencies {
    compile('org.springframework.boot:spring-boot-starter-actuator')
    compile('org.springframework.boot:spring-boot-starter-web')
    compile("io.springfox:springfox-swagger2:${versions.springfoxSwagger}")
    compile("io.springfox:springfox-swagger-ui:${versions.springfoxSwagger}")

    testCompile('org.springframework.boot:spring-boot-starter-test')
}

// checkstyle {
//   maxWarnings = 0
//   toolVersion = '8.10.1'
//   // need to set configDir to rootDir otherwise submodule will use submodule/config/checkstyle
//   configDir = new File(rootDir, 'config/checkstyle')
// }
//
// pmd {
//   toolVersion = "6.5.0"
//   ignoreFailures = true
//   sourceSets = [sourceSets.main, sourceSets.test, sourceSets.functionalTest, sourceSets.integrationTest, sourceSets.smokeTest]
//   reportsDir = file("$project.buildDir/reports/pmd")
//   ruleSetFiles = files("config/pmd/ruleset.xml")
// }

//(./gradlew sonarqube)
sonarqube {
    properties {
        property "sonar.projectName", "${rootProject.name}"
        property "sonar.jacoco.reportPath", "${project.buildDir}/jacoco/test.exec"
    }
}

jacocoTestReport {
  executionData(test)
  reports {
    xml.enabled = true
    csv.enabled = false
    xml.destination = file("${project.buildDir}/reports/jacoco/test/jacocoTestReport.xml")
  }
}

// https://jeremylong.github.io/DependencyCheck/dependency-check-gradle/configuration.html
dependencyCheck {
  failBuildOnCVSS = System.getProperty('dependencyCheck.failBuild') == 'true' ? 0 : 11
  suppressionFile = 'config/owasp/suppressions.xml'
}

sourceSets {
    aat {
        java {
            compileClasspath += main.output
            runtimeClasspath += main.output
            srcDir('src/aat/java')
        }
        resources {
            srcDir('src/aat/resources')
        }
    }
}

task functional(type: Test) {
    group = 'Verification'
    description = 'Executes functional tests'
    setTestClassesDirs(sourceSets.aat.output.classesDirs)
    setClasspath(sourceSets.aat.runtimeClasspath)
    include "uk/gov/hmcts/reform/rpa/papi/functional/**"

    environment("APPINSIGHTS_INSTRUMENTATIONKEY", "test-key")
}

task smoke(type: Test) {
    group = 'Verification'
    description = 'Executes smoke tests'
    setTestClassesDirs(sourceSets.aat.output.classesDirs)
    setClasspath(sourceSets.aat.runtimeClasspath)
    include "uk/gov/hmcts/reform/rpa/papi/smoke/**"

    environment("APPINSIGHTS_INSTRUMENTATIONKEY", "test-key")
}

